/* eslint-disable prefer-const */
// Photographer page handling
const bdd = require('../modules/bdd')
const factoryPhotographer = require('../factories/photographer')
const factoryMedias = require('../factories/medias')
const errMsg = require('../utils/errorMsg')
const { regExName, regExEmail, regExMessage } = require('../utils/regExPatterns')
const { modalLinker, displayModal, closeModal, checkTextField, errorDisplayHandler, checkFormValid } = require('../utils/contactForm')

// Local variables declarations and initialisation
let formValid = false
let firstNameValid = false
let lastNameValid = false
let emailValid = false
let messageValid = false

// Define wich html page to apply this js
const expectedPage = 'photographer.html'

// Remove leading slash on the page name
const page = new URL(document.location).pathname.replace(/\//, '')

// Get the id of the photographer
const params = (new URL(document.location)).searchParams
const _id = params.get('id')

/**
 * Get all the photograper according to it's id which is defined globally
 * @param : none
 * @returns : Array of informations on the photographer
 */
const loadPhotographer = async () => {
  const photographe = await bdd.getPhotographerByID(_id)
  return photographe
}

/**
 * Display the photograper's header according the datas fetched by loadPhotographer
 * @param : object 'photograph' generated by 'loadPhotographer'
 */
const displayPhotographer = async (photographe) => {
  const photographerHeader = document.querySelector('.photograph-header')
  const photographerModel = factoryPhotographer.create(await photographe)
  const userCardDOM = photographerModel.getUserCardDOM(page)
  photographerHeader.appendChild(userCardDOM)
  const contactButton = document.querySelector('.contact_button')
  const divIdentity = document.querySelector('.div-identity')
  const pictureIdentity = document.querySelector('.picture-identity')
  photographerHeader.insertBefore(divIdentity, contactButton)
  photographerHeader.appendChild(pictureIdentity)
  displayMedias(photographe)
}

/**
 * Display the medias of the photographer according the datas fetched by loadPhotographer
 * @param : object 'photograph' generated by 'loadPhotographer'
 */
const displayMedias = async (photographe) => {
  const main = document.querySelector('#main')
  const mediasSection = document.createElement('section')
  mediasSection.classList.add('medias-section')
  const mediasByPhotographerId = await bdd.getMediasByPhotographerId(_id)
  mediasByPhotographerId.forEach((media) => {
    const firstName = photographe.name.substring(photographe.name.lastIndexOf(' '), 0).replace('-', ' ')
    media.photographFirstname = firstName
    const mediaModel = factoryMedias.create(media)
    const mediaCardDOM = mediaModel.getMediasDOM()
    main.appendChild(mediasSection)
    mediasSection.appendChild(mediaCardDOM)
  })
}

/**
 * Initialize the page
 * Loads and displays the datas and set the events catchers
 */
const init = async () => {
  const photographe = await loadPhotographer()
  displayPhotographer(photographe)

  // catch and test inputs in the form
  modalLinker.formBtn.addEventListener('click', () => displayModal(photographe.name))
  modalLinker.closeBtn.addEventListener('click', () => closeModal())
  modalLinker.firstName.addEventListener('input', function () {
    firstNameValid = checkTextField(modalLinker.firstName, regExName)
    errorDisplayHandler(modalLinker.firstName, firstNameValid, modalLinker.errorFirstName, errMsg.errorFirstNameTxt)
  })
  modalLinker.lastName.addEventListener('input', function () {
    lastNameValid = checkTextField(modalLinker.lastName, regExName)
    errorDisplayHandler(modalLinker.lastName, lastNameValid, modalLinker.errorLastName, errMsg.errorLastNameTxt)
  })
  modalLinker.email.addEventListener('input', function () {
    emailValid = checkTextField(modalLinker.email, regExEmail)
    errorDisplayHandler(modalLinker.email, emailValid, modalLinker.errorEmail, errMsg.errorEmailTxt)
  })
  modalLinker.message.addEventListener('input', function () {
    messageValid = checkTextField(modalLinker.message, regExMessage)
    errorDisplayHandler(modalLinker.message, messageValid, modalLinker.errorMessage, errMsg.errorMessageTxt)
  })
  modalLinker.fullForm.addEventListener('submit', (event) => {
    event.preventDefault()
    if (checkFormValid(formValid, firstNameValid, lastNameValid, emailValid, messageValid)) {
      console.log('Soumission du formulaire')
      console.log(modalLinker.firstName.value)
      // modalLinker.fullForm.submit()
    } else {
      console.log('Formulaire invalide')

      if (!firstNameValid) errorDisplayHandler(modalLinker.firstName, firstNameValid, modalLinker.errorFirstName, errMsg.errorFirstNameTxt)
      if (!lastNameValid) errorDisplayHandler(modalLinker.lastName, lastNameValid, modalLinker.errorLastName, errMsg.errorLastNameTxt)
      if (!emailValid) errorDisplayHandler(modalLinker.email, emailValid, modalLinker.errorEmail, errMsg.errorEmailTxt)
      if (!messageValid) errorDisplayHandler(modalLinker.message, messageValid, modalLinker.errorMessage, errMsg.errorMessageTxt)
    }
  })
}

// If it's the right page, then load everything we need
if (window.location.pathname.endsWith(expectedPage)) {
  init()
}
