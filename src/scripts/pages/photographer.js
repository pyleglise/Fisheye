// Photographer page handling
module.exports = _id => {
  const bdd = require('../modules/bdd')
  const factoryPhotographer = require('../factories/photographer')
  const factoryMedias = require('../factories/medias')
  const errMsg = require('../utils/errorMsg')
  const { regExName, regExEmail, regExMessage } = require('../utils/regExPatterns')
  const {
    modalLinker, displayModal, closeModal, checkTextField, errorDisplayHandler, checkFormValid,
    checker
  } = require('../utils/contactForm')

  // Remove leading slash on the page name
  const page = new URL(document.location).pathname.replace(/\//, '')

  // Get the id of the photographer
  _id = parseInt(_id)

  /**
   * Get all the photograper according to it's id which is defined globally
   * @param : none
   * @returns : Array of informations on the photographer
   */
  const loadPhotographer = async () => {
    const photographe = await bdd.getPhotographerByID(_id)
    return photographe
  }

  /**
   * Display the photograper's header according the datas fetched by loadPhotographer
   * @param : object 'photograph' generated by 'loadPhotographer'
   */
  const displayPhotographer = async (photographe) => {
    const photographerHeader = document.querySelector('.photograph-header')
    const photographerModel = factoryPhotographer.create(await photographe)
    const userCardDOM = photographerModel.getUserCardDOM(page)
    photographerHeader.appendChild(userCardDOM)
    const contactButton = document.querySelector('.contact_button')
    const divIdentity = document.querySelector('.div-identity')
    const pictureIdentity = document.querySelector('.picture-identity')
    photographerHeader.insertBefore(divIdentity, contactButton)
    photographerHeader.appendChild(pictureIdentity)
    displayMedias(photographe)
  }

  /**
   * Display the medias of the photographer according the datas fetched by loadPhotographer
   * @param : object 'photograph' generated by 'loadPhotographer'
   */
  const displayMedias = async (photographe) => {
    const main = document.querySelector('#main')
    const mediasSection = document.createElement('section')
    mediasSection.classList.add('medias-section')
    const mediasByPhotographerId = await bdd.getMediasByPhotographerId(_id)
    mediasByPhotographerId.forEach((media) => {
      const firstName = photographe.name.substring(photographe.name.lastIndexOf(' '), 0).replace('-', ' ')
      media.photographFirstname = firstName
      const mediaModel = factoryMedias.create(media)
      const mediaCardDOM = mediaModel.getMediasDOM()
      main.appendChild(mediasSection)
      mediasSection.appendChild(mediaCardDOM)
    })
  }

  /**
   * Initialize the page
   * Loads and displays the datas and set the events catchers
   */
  const init = async () => {
    const photographe = await loadPhotographer()
    displayPhotographer(photographe)

    // catch and test inputs in the form
    modalLinker.formBtn.addEventListener('click', () => displayModal(photographe.name))
    modalLinker.closeBtn.addEventListener('click', () => closeModal())
    modalLinker.firstName.addEventListener('input', function () {
      checker.firstNameValid = checkTextField(modalLinker.firstName, regExName)
      errorDisplayHandler(modalLinker.firstName, checker.firstNameValid, modalLinker.errorFirstName, errMsg.errorFirstNameTxt)
    })
    modalLinker.lastName.addEventListener('input', function () {
      checker.lastNameValid = checkTextField(modalLinker.lastName, regExName)
      errorDisplayHandler(modalLinker.lastName, checker.lastNameValid, modalLinker.errorLastName, errMsg.errorLastNameTxt)
    })
    modalLinker.email.addEventListener('input', function () {
      checker.emailValid = checkTextField(modalLinker.email, regExEmail)
      errorDisplayHandler(modalLinker.email, checker.emailValid, modalLinker.errorEmail, errMsg.errorEmailTxt)
    })
    modalLinker.message.addEventListener('input', function () {
      checker.messageValid = checkTextField(modalLinker.message, regExMessage)
      errorDisplayHandler(modalLinker.message, checker.messageValid, modalLinker.errorMessage, errMsg.errorMessageTxt)
    })
    modalLinker.fullForm.addEventListener('submit', (event) => {
      event.preventDefault()
      if (checkFormValid(checker.formValid, checker.firstNameValid, checker.lastNameValid, checker.emailValid, checker.messageValid)) {
        console.log('Soumission du formulaire')
        console.log('Firstname : ' + modalLinker.firstName.value)
        console.log('Lastname : ' + modalLinker.lastName.value)
        console.log('Email : ' + modalLinker.email.value)
        console.log('Message : ' + modalLinker.message.value)
        modalLinker.firstName.value = modalLinker.lastName.value = modalLinker.email.value = modalLinker.message.value = ''
        closeModal()
        // modalLinker.fullForm.submit()
      } else {
        console.log("Formulaire invalide. Abandon et messages d'erreurs")

        if (!checker.firstNameValid) errorDisplayHandler(modalLinker.firstName, checker.firstNameValid, modalLinker.errorFirstName, errMsg.errorFirstNameTxt)
        if (!checker.lastNameValid) errorDisplayHandler(modalLinker.lastName, checker.lastNameValid, modalLinker.errorLastName, errMsg.errorLastNameTxt)
        if (!checker.emailValid) errorDisplayHandler(modalLinker.email, checker.emailValid, modalLinker.errorEmail, errMsg.errorEmailTxt)
        if (!checker.messageValid) errorDisplayHandler(modalLinker.message, checker.messageValid, modalLinker.errorMessage, errMsg.errorMessageTxt)
      }
    })
  }

  init()
}
