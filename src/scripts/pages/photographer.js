// Photographer page handling
module.exports = (_id, _mediaId) => {
  require('../../css/lightbox.scss')
  const bdd = require('../modules/bdd')
  const factoryPhotographer = require('../factories/photographer')
  const factoryMedias = require('../factories/medias')
  const factoryLightbox = require('../factories/lightBox')
  const errMsg = require('../utils/errorMsg')
  const { modalLinker, domLinker } = require('../utils/linker')
  const { regExName, regExEmail, regExMessage } = require('../utils/regExPatterns')
  const {
    displayModal, closeModal, checkTextField, errorDisplayHandler, checkFormValid,
    checker
  } = require('../utils/contactForm')

  // Remove leading slash on the page name
  const page = new URL(document.location).pathname.replace(/\//, '')

  // parse the parameters
  _id = parseInt(_id)
  _mediaId = parseInt(_mediaId)

  /**
   * Get all the photograper according to it's id which is defined globally
   * @param : none
   * @returns : Array of informations on the photographer
   */
  const loadPhotographer = async () => {
    const photographe = await bdd.getPhotographerByID(_id)
    return photographe
  }

  /**
   * Display the photograper's header according the datas fetched by loadPhotographer
   * @param : object 'photograph' generated by 'loadPhotographer'
   */
  const displayPhotographer = async (photographe) => {
    const photographerHeader = document.querySelector('.photograph-header')
    const photographerModel = factoryPhotographer.create(await photographe)
    const userCardDOM = photographerModel.getUserCardDOM(page)
    photographerHeader.appendChild(userCardDOM)
    const contactButton = document.querySelector('.contact_button')
    const divIdentity = document.querySelector('.div-identity')
    const pictureIdentity = document.querySelector('.picture-identity')
    photographerHeader.insertBefore(divIdentity, contactButton)
    photographerHeader.appendChild(pictureIdentity)
    displayMedias(photographe)
  }

  /**
   * Display the medias of the photographer according the datas fetched by loadPhotographer
   * @param : object 'photograph' generated by 'loadPhotographer'
   */
  const displayMedias = async (photographe) => {
    const main = document.querySelector('#main')
    const mediasSection = document.createElement('section')
    mediasSection.classList.add('medias-section')
    const mediasByPhotographerId = await bdd.getMediasByPhotographerId(_id)
    mediasByPhotographerId.forEach((media) => {
      const firstName = photographe.name.substring(photographe.name.lastIndexOf(' '), 0).replace('-', ' ')
      media.photographFirstname = firstName
      const mediaModel = factoryMedias.create(media)
      const mediaCardDOM = mediaModel.getMediasDOM()
      main.appendChild(mediasSection)
      mediasSection.appendChild(mediaCardDOM)
    })
  }

  /**
   * Display the lightbox portfolio of the photographer according the datas fetched by loadPhotographer
   * @param : object 'photograph' generated by 'loadPhotographer'
   */
  const displayLightbox = async (photographe, _mediaId) => {
    if (_mediaId) {
      const modal = modalLinker.modal
      domLinker.header.style.display = 'none'
      modal.style.display = 'none'
      modalLinker.mainZone.style.display = 'none'
      domLinker.footer.style.display = 'none'
      const mediasIdByPhotographerId = await bdd.getMediasIdByPhotographerId(_id, _mediaId)
      const firstName = photographe.name.substring(photographe.name.lastIndexOf(' '), 0).replace('-', ' ')
      mediasIdByPhotographerId.photographFirstname = firstName
      const mediaLbModel = factoryLightbox.create(mediasIdByPhotographerId)
      const mediaLbCardDOM = mediaLbModel.getLbMediaDOM()
      modal.after(mediaLbCardDOM)

      const mediasByPhotographerId = await bdd.getMediasByPhotographerId(_id)
      const idx = mediasByPhotographerId.findIndex((e) => e.id === _mediaId)

      // catch the controls in the lightbox
      const lbLeftArrow = document.querySelector('.fa-angle-left')
      const lbRightArrow = document.querySelector('.fa-angle-right')
      const lbCloseBtn = document.querySelector('.fa-xmark')

      if (idx > 0) { // if first image, hide the left arrow
        lbLeftArrow.addEventListener('click', function () {
          const url = new URL(window.location.href)
          url.searchParams.set('mediaId', mediasByPhotographerId[idx - 1].id)
          window.history.pushState('', document.title, url)
          const lightboxModal = document.getElementById('lightbox')
          lightboxModal.remove()
          displayLightbox(photographe, mediasByPhotographerId[idx - 1].id)
        })
      } else lbLeftArrow.style.visibility = 'hidden'

      if (idx < mediasByPhotographerId.length - 1) { // if last image, hide the right arrow
        lbRightArrow.addEventListener('click', function () {
          const url = new URL(window.location.href)
          url.searchParams.set('mediaId', mediasByPhotographerId[idx + 1].id)
          window.history.pushState('', document.title, url)
          const lightboxModal = document.getElementById('lightbox')
          lightboxModal.remove()
          displayLightbox(photographe, mediasByPhotographerId[idx + 1].id)
        })
      } else lbRightArrow.style.visibility = 'hidden'

      lbCloseBtn.addEventListener('click', function () {
        const modal = modalLinker.modal
        domLinker.header.style.display = ''
        modal.style.display = ''
        modalLinker.mainZone.style.display = ''
        domLinker.footer.style.display = ''
        const lightboxModal = document.getElementById('lightbox')
        lightboxModal.remove()
      })
    }
  }

  /**
   * Initialize the page
   * Loads and displays the datas and set the events catchers
   */
  const init = async () => {
    const photographe = await loadPhotographer()

    if (_mediaId) {
      await displayLightbox(photographe, _mediaId)
    }
    displayPhotographer(photographe)

    // catch and test inputs in the form
    modalLinker.formBtn.addEventListener('click', () => displayModal(photographe.name))
    modalLinker.closeBtn.addEventListener('click', () => closeModal())
    modalLinker.firstName.addEventListener('input', function () {
      checker.firstNameValid = checkTextField(modalLinker.firstName, regExName)
      errorDisplayHandler(modalLinker.firstName, checker.firstNameValid, modalLinker.errorFirstName, errMsg.errorFirstNameTxt)
    })
    modalLinker.lastName.addEventListener('input', function () {
      checker.lastNameValid = checkTextField(modalLinker.lastName, regExName)
      errorDisplayHandler(modalLinker.lastName, checker.lastNameValid, modalLinker.errorLastName, errMsg.errorLastNameTxt)
    })
    modalLinker.email.addEventListener('input', function () {
      checker.emailValid = checkTextField(modalLinker.email, regExEmail)
      errorDisplayHandler(modalLinker.email, checker.emailValid, modalLinker.errorEmail, errMsg.errorEmailTxt)
    })
    modalLinker.message.addEventListener('input', function () {
      checker.messageValid = checkTextField(modalLinker.message, regExMessage)
      errorDisplayHandler(modalLinker.message, checker.messageValid, modalLinker.errorMessage, errMsg.errorMessageTxt)
    })
    // Catch submit button an process last control of the input before submitting the form
    modalLinker.fullForm.addEventListener('submit', (event) => {
      event.preventDefault()
      if (checkFormValid(checker.formValid, checker.firstNameValid, checker.lastNameValid, checker.emailValid, checker.messageValid)) {
        console.log('Soumission du formulaire')
        console.log('Firstname : ' + modalLinker.firstName.value)
        console.log('Lastname : ' + modalLinker.lastName.value)
        console.log('Email : ' + modalLinker.email.value)
        console.log('Message : ' + modalLinker.message.value)
        modalLinker.firstName.value = modalLinker.lastName.value = modalLinker.email.value = modalLinker.message.value = ''
        closeModal()
        // modalLinker.fullForm.submit()
      } else {
        console.log("Formulaire invalide. Abandon et messages d'erreurs")

        if (!checker.firstNameValid) errorDisplayHandler(modalLinker.firstName, checker.firstNameValid, modalLinker.errorFirstName, errMsg.errorFirstNameTxt)
        if (!checker.lastNameValid) errorDisplayHandler(modalLinker.lastName, checker.lastNameValid, modalLinker.errorLastName, errMsg.errorLastNameTxt)
        if (!checker.emailValid) errorDisplayHandler(modalLinker.email, checker.emailValid, modalLinker.errorEmail, errMsg.errorEmailTxt)
        if (!checker.messageValid) errorDisplayHandler(modalLinker.message, checker.messageValid, modalLinker.errorMessage, errMsg.errorMessageTxt)
      }
    })
  }

  init()
}
